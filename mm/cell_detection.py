# -*- coding: utf-8 -*-
"""
documentation
"""
from __future__ import division, unicode_literals, print_function

import numpy as np
import itertools

from ..generic.otsu import threshold_otsu
from ..generic.signal import hamming_smooth, simple_baseline_correction, find_extrema_and_prominence, \
    vertical_mean, threshold_outliers, savitzky_golay_filter, horizontal_mean, normalize, normalize2, \
    add_element_to_list, multiply_list_by_element, subtraction, white_top_hat, min_and_max, normalize_specific_range

from ..debugging import DebugPlot
from ..generic.tunable import tunable

class Cell(object):
    """
    A Cell.

    :param top: coordinate of the 'top' of the cell, in channel coordinates
    :param bottom: coordinate of the 'bottom' of the cell, in channel coordinates
    :param channel: Channel object the cell belongs to
    """
    __slots__ = ['local_top', 'local_bottom', 'channel']

    def __init__(self, top, bottom, channel):
        self.local_top = float(top)
        self.local_bottom = float(bottom)

        self.channel = channel

    @property
    def top(self):
        """
        Returns the absolute (on rotated image) coordinate of the cell top.

        :return: top
        """
        return self.channel.top + self.local_top

    @property
    def bottom(self):
        """
        Returns the absolute (on rotated image) coordinate of the cell bottom.

        :return:
        """
        return self.channel.top + self.local_bottom

    @property
    def length(self):
        """
        Returns the cell length.

        :return: length
        """
        return abs(self.top - self.bottom)

    @property
    def centroid_1d(self):
        """
        Returns the (one dimensional) (absolute coordinate on rotated image) centroid.
        :return: centroid
        :rtype: float
        """
        return (self.top + self.bottom) / 2.0

    @property
    def centroid(self):
        """
        Returns the (absolute coordinate on rotated image) centroid (2D).
        :return:
        :rtype: list
        """
        return [self.channel.centroid[0], self.centroid_1d]

    @property
    def cell_image(self):
        """
        The cell image, cropped out of the channel image.

        :return: image
        :rtype: numpy.ndarray
        """
        return self.crop_out_of_channel_image(self.channel.channel_image)

    def crop_out_of_channel_image(self, channel_image):
        """
        Crops the clel out of a provided image.
        Used internally for :py:meth:`Cell.cell_image`, and to crop cells out of fluorescence channel images.

        :param channel_image:
        :type channel_image: numpy.ndarray
        :return: image
        :rtype: numpy.ndarray
        """
        return channel_image[int(self.local_top):int(self.local_bottom), :]

    def __lt__(self, other_cell):
        return self.local_top < other_cell.local_top

class Cells(object):
    """
        A Cells object, a collection of Cell objects.
    """

    __slots__ = ['cells_list', 'channel', 'nearest_tree', 'min_max_from_profile']

    cell_type = Cell

    def __init__(self, channel, bootstrap=True):

        self.cells_list = []

        self.channel = channel

        self.nearest_tree = None

        if not bootstrap:
            return

        find_cells_in_channel_ = find_cells_in_channel(self.channel.channel_image)

        cells_list= find_cells_in_channel_[0]
        self.min_max_from_profile = find_cells_in_channel_[1]

        for b, e in cells_list:
            # ... this is the actual minimal size filtering
            if self.channel.image.mu_to_pixel(
                    tunable('cells.minimal_length.in_mu', 1.0,
                            description="The minimal allowed cell size (Smaller cells will be filtered out).")
            ) < e - b:
                self.cells_list.append(self.__class__.cell_type(b, e, self.channel))

    def __len__(self):
        return len(self.cells_list)

    def __iter__(self):
        return iter(self.cells_list)

    def clean(self):
        """
        Performs clean-up.

        """
        pass

    @property
    def centroids(self):
        """
        Returns the centroids of the cells.

        :return: centroids
        :rtype: list
        """
        return [cell.centroid for cell in self.cells_list]

def empty_channel_mean_profile():
    profile_empty_channel_mean = [
        941.3333333333334,
        1156.8333333333333,
        1235.8333333333333,
        1279.0,
        1283.3333333333333,
        1276.5,
        1286.1666666666667,
        1252.5,
        1250.0,
        1228.8333333333333,
        1216.3333333333333,
        1208.1666666666667,
        1197.3333333333333,
        1185.5,
        1185.1666666666667,
        1192.3333333333333,
        1190.5,
        1188.3333333333333,
        1192.5,
        1193.6666666666667,
        1195.6666666666667,
        1182.8333333333333,
        1186.6666666666667,
        1205.1666666666667,
        1197.5,
        1194.0,
        1187.5,
        1185.8333333333333,
        1186.0,
        1187.1666666666667,
        1181.5,
        1185.0,
        1187.1666666666667,
        1191.3333333333333,
        1176.5,
        1193.0,
        1196.0,
        1191.6666666666667,
        1187.1666666666667,
        1204.6666666666667,
        1200.6666666666667,
        1201.3333333333333,
        1199.3333333333333,
        1196.0,
        1202.0,
        1199.3333333333333,
        1205.6666666666667,
        1205.0,
        1204.3333333333333,
        1211.3333333333333,
        1211.5,
        1207.6666666666667,
        1194.5,
        1201.8333333333333,
        1209.6666666666667,
        1213.3333333333333,
        1216.3333333333333,
        1203.6666666666667,
        1215.5,
        1211.8333333333333,
        1217.6666666666667,
        1228.6666666666667,
        1226.6666666666667,
        1222.1666666666667,
        1226.0,
        1219.0,
        1224.5,
        1229.5,
        1232.6666666666667,
        1229.1666666666667,
        1239.6666666666667,
        1230.8333333333333,
        1234.8333333333333,
        1234.1666666666667,
        1232.0,
        1243.6666666666667,
        1236.5,
        1235.6666666666667,
        1242.0,
        1245.1666666666667,
        1240.5,
        1248.6666666666667,
        1252.3333333333333,
        1250.8333333333333,
        1237.0,
        1257.5,
        1251.0,
        1244.5,
        1238.5,
        1236.6666666666667,
        1241.8333333333333,
        1250.1666666666667,
        1259.1666666666667,
        1253.5,
        1254.1666666666667,
        1234.1666666666667,
        1248.1666666666667,
        1224.8333333333333,
        1237.8333333333333,
        1262.6666666666667,
        1256.0,
        1290.8333333333333,
        1308.5,
        1319.3333333333333,
        1300.1666666666667,
        1276.1666666666667,
        1260.6666666666667,
        1237.1666666666667,
        1260.6666666666667,
        1269.1666666666667,
        1308.8333333333333,
        1372.8333333333333,
        1460.6666666666667]  # MM09 Pro1 -E:\Mayra\Timelapses\coVF Timecourses\coVF_ProX-2\Mark 01-12-18 Inc32Degs\001\bottom-Pro1-inverted.tif
    profile_empty_channel_mean_MM09 = [1514.5,
                                       1436.5,
                                       1352.5,
                                       1297.5,
                                       1257.5,
                                       1265.5,
                                       1278.0,
                                       1289.0,
                                       1344.5,
                                       1356.5,
                                       1341.0,
                                       1344.5,
                                       1311.5,
                                       1308.5,
                                       1267.0,
                                       1260.0,
                                       1270.0,
                                       1277.0,
                                       1283.0,
                                       1292.0,
                                       1307.5,
                                       1264.0,
                                       1262.5,
                                       1272.0,
                                       1244.5,
                                       1256.5,
                                       1262.0,
                                       1266.0,
                                       1268.0,
                                       1274.5,
                                       1268.0,
                                       1256.0,
                                       1238.5,
                                       1263.5,
                                       1251.0,
                                       1249.0,
                                       1238.0,
                                       1254.5,
                                       1251.0,
                                       1255.5,
                                       1234.0,
                                       1227.5,
                                       1250.0,
                                       1225.5,
                                       1224.0,
                                       1240.5,
                                       1217.5,
                                       1233.0,
                                       1244.0,
                                       1230.5,
                                       1246.0,
                                       1233.0,
                                       1227.5,
                                       1237.5,
                                       1214.0,
                                       1213.0,
                                       1227.5,
                                       1207.0,
                                       1196.5,
                                       1199.5,
                                       1203.5,
                                       1198.0,
                                       1199.5,
                                       1196.0,
                                       1209.5,
                                       1205.5,
                                       1206.5,
                                       1209.5,
                                       1209.0,
                                       1208.5,
                                       1198.0,
                                       1198.0,
                                       1188.5,
                                       1204.5,
                                       1193.5,
                                       1209.0,
                                       1189.0,
                                       1182.5,
                                       1193.5,
                                       1181.5,
                                       1186.5,
                                       1193.5,
                                       1175.5,
                                       1177.5,
                                       1207.0,
                                       1182.0,
                                       1193.0,
                                       1189.0,
                                       1186.5,
                                       1185.0,
                                       1165.5,
                                       1187.5,
                                       1182.5,
                                       1189.5,
                                       1192.5,
                                       1184.5,
                                       1171.0,
                                       1184.5,
                                       1184.5,
                                       1203.5,
                                       1200.5,
                                       1218.5,
                                       1221.5,
                                       1238.5,
                                       1247.5,
                                       1250.5,
                                       1278.0,
                                       1287.5,
                                       1309.0,
                                       1312.5,
                                       1329.0,
                                       1318.5,
                                       1212.0,
                                       899.5]  # MM09 Pro1-E:\Mayra\Timelapses\coVF Timecourses\coVF_ProX-2\Mark 01-12-18 Inc32Degs\001\PC-Pro1-1.tif
    profile_empty_channel_mean = [1410.7142857142858,
                                  1411.7142857142858,
                                  1385.2857142857142,
                                  1315.2857142857142,
                                  1271.0,
                                  1244.5714285714287,
                                  1229.857142857143,
                                  1217.7142857142858,
                                  1203.857142857143,
                                  1188.0,
                                  1174.857142857143,
                                  1171.142857142857,
                                  1169.2857142857142,
                                  1159.142857142857,
                                  1150.7142857142858,
                                  1154.7142857142858,
                                  1153.142857142857,
                                  1151.7142857142858,
                                  1150.4285714285713,
                                  1157.4285714285713,
                                  1156.5714285714287,
                                  1158.0,
                                  1160.5714285714287,
                                  1150.857142857143,
                                  1143.2857142857142,
                                  1140.4285714285713,
                                  1124.5714285714287,
                                  1102.2857142857142,
                                  1082.7142857142858,
                                  1084.142857142857,
                                  1070.2857142857142,
                                  1064.0,
                                  1079.4285714285713,
                                  1102.2857142857142,
                                  1116.142857142857,
                                  1125.5714285714287,
                                  1138.2857142857142,
                                  1152.857142857143,
                                  1160.7142857142858,
                                  1158.2857142857142,
                                  1162.857142857143,
                                  1172.857142857143,
                                  1166.4285714285713,
                                  1156.857142857143,
                                  1149.4285714285713,
                                  1153.2857142857142,
                                  1154.4285714285713,
                                  1149.2857142857142,
                                  1160.2857142857142,
                                  1169.7142857142858,
                                  1160.0,
                                  1164.0,
                                  1169.5714285714287,
                                  1159.4285714285713,
                                  1154.4285714285713,
                                  1149.7142857142858,
                                  1147.142857142857,
                                  1157.857142857143,
                                  1165.0,
                                  1165.857142857143,
                                  1171.7142857142858,
                                  1159.7142857142858,
                                  1147.142857142857,
                                  1156.857142857143,
                                  1160.2857142857142,
                                  1160.142857142857,
                                  1170.2857142857142,
                                  1160.5714285714287,
                                  1159.7142857142858,
                                  1167.0,
                                  1156.2857142857142,
                                  1158.0,
                                  1169.4285714285713,
                                  1167.5714285714287,
                                  1154.0,
                                  1155.0,
                                  1169.142857142857,
                                  1168.0,
                                  1159.142857142857,
                                  1161.857142857143,
                                  1167.142857142857,
                                  1182.0,
                                  1179.2857142857142,
                                  1167.0,
                                  1183.2857142857142,
                                  1182.857142857143,
                                  1184.5714285714287,
                                  1212.2857142857142,
                                  1210.142857142857,
                                  1214.5714285714287,
                                  1217.0,
                                  1207.857142857143,
                                  1204.0,
                                  1202.0,
                                  1213.142857142857,
                                  1236.5714285714287,
                                  1250.5714285714287,
                                  1271.142857142857,
                                  1279.0,
                                  1285.0,
                                  1275.857142857143,
                                  1246.142857142857,
                                  1229.5714285714287,
                                  1240.5714285714287,
                                  1258.0,
                                  1299.4285714285713,
                                  1363.7142857142858]  # ProB  FOV1 experiment 2 50-50
    profile_empty_channel_mean = [
        817.875,
        952.0,
        1036.75,
        1159.875,
        1264.625,
        1301.375,
        1265.5,
        1223.875,
        1205.25,
        1200.5,
        1171.0,
        1171.0,
        1172.5,
        1180.5,
        1182.5,
        1182.125,
        1185.875,
        1198.625,
        1199.25,
        1200.375,
        1209.875,
        1216.5,
        1208.125,
        1216.5,
        1216.5,
        1212.25,
        1206.875,
        1202.375,
        1206.5,
        1200.375,
        1190.875,
        1191.5,
        1178.875,
        1169.25,
        1177.25,
        1185.25,
        1172.0,
        1182.875,
        1190.5,
        1200.25,
        1202.125,
        1201.0,
        1222.75,
        1213.875,
        1225.25,
        1225.0,
        1223.125,
        1212.0,
        1209.375,
        1211.625,
        1204.5,
        1194.75,
        1194.5,
        1190.75,
        1187.125,
        1185.125,
        1174.625,
        1167.5,
        1167.625,
        1168.25,
        1176.875,
        1185.875,
        1178.5,
        1185.0,
        1184.125,
        1180.625,
        1186.75,
        1174.125,
        1166.5,
        1174.0,
        1168.0,
        1167.75,
        1164.625,
        1176.625,
        1178.25,
        1193.375,
        1183.625,
        1182.5,
        1175.375,
        1167.25,
        1158.25,
        1159.25,
        1153.75,
        1161.5,
        1161.0,
        1174.125,
        1161.875,
        1154.875,
        1148.75,
        1163.625,
        1178.125,
        1195.625,
        1209.75,
        1213.875,
        1203.875,
        1212.5,
        1186.375,
        1189.25,
        1206.875,
        1226.75,
        1245.125,
        1263.125,
        1263.875,
        1240.0,
        1218.875,
        1180.375,
        1173.5,
        1169.0,
        1203.75]  # ProB  FOV1 experiment 1
    ProB_008 = [780.6666666666666,
                901.5555555555555,
                980.6666666666666,
                1096.111111111111,
                1193.2222222222222,
                1228.888888888889,
                1198.3333333333333,
                1162.111111111111,
                1146.5555555555557,
                1141.4444444444443,
                1117.6666666666667,
                1119.4444444444443,
                1121.111111111111,
                1129.6666666666667,
                1131.5555555555557,
                1132.6666666666667,
                1137.888888888889,
                1149.2222222222222,
                1150.3333333333333,
                1153.111111111111,
                1163.3333333333333,
                1169.7777777777778,
                1162.2222222222222,
                1171.2222222222222,
                1169.6666666666667,
                1164.7777777777778,
                1158.7777777777778,
                1153.888888888889,
                1157.888888888889,
                1152.0,
                1143.111111111111,
                1139.888888888889,
                1131.2222222222222,
                1120.0,
                1126.7777777777778,
                1136.4444444444443,
                1122.0,
                1132.3333333333333,
                1140.3333333333333,
                1147.888888888889,
                1150.5555555555557,
                1150.2222222222222,
                1166.3333333333333,
                1161.4444444444443,
                1169.6666666666667,
                1169.7777777777778,
                1168.6666666666667,
                1157.111111111111,
                1156.111111111111,
                1157.888888888889,
                1151.4444444444443,
                1143.0,
                1141.5555555555557,
                1137.7777777777778,
                1134.888888888889,
                1132.5555555555557,
                1120.7777777777778,
                1115.7777777777778,
                1116.111111111111,
                1115.5555555555557,
                1125.7777777777778,
                1132.7777777777778,
                1125.888888888889,
                1131.888888888889,
                1129.111111111111,
                1125.3333333333333,
                1131.4444444444443,
                1119.888888888889,
                1114.3333333333333,
                1120.111111111111,
                1114.4444444444443,
                1113.3333333333333,
                1112.4444444444443,
                1122.111111111111,
                1125.111111111111,
                1138.2222222222222,
                1131.111111111111,
                1127.4444444444443,
                1121.7777777777778,
                1112.7777777777778,
                1104.888888888889,
                1105.888888888889,
                1103.3333333333333,
                1109.3333333333333,
                1109.6666666666667,
                1120.888888888889,
                1111.888888888889,
                1104.4444444444443,
                1096.2222222222222,
                1110.5555555555557,
                1123.3333333333333,
                1142.2222222222222,
                1153.5555555555557,
                1158.7777777777778,
                1149.2222222222222,
                1157.7777777777778,
                1132.6666666666667,
                1135.888888888889,
                1152.3333333333333,
                1170.2222222222222,
                1188.888888888889,
                1207.2222222222222,
                1207.4444444444443,
                1185.5555555555557,
                1164.111111111111,
                1128.7777777777778,
                1122.4444444444443,
                1119.6666666666667,
                1153.888888888889]
    ProB_008_penultimo = [1119.7142857142858,
                          1243.857142857143,
                          1269.4285714285713,
                          1312.857142857143,
                          1381.857142857143,
                          1392.5714285714287,
                          1376.4285714285713,
                          1365.7142857142858,
                          1345.0,
                          1323.0,
                          1308.0,
                          1282.5714285714287,
                          1282.857142857143,
                          1281.857142857143,
                          1279.857142857143,
                          1258.2857142857142,
                          1252.142857142857,
                          1249.142857142857,
                          1250.142857142857,
                          1246.2857142857142,
                          1235.857142857143,
                          1241.2857142857142,
                          1244.857142857143,
                          1244.857142857143,
                          1252.5714285714287,
                          1248.7142857142858,
                          1259.5714285714287,
                          1237.0,
                          1246.4285714285713,
                          1248.0,
                          1239.5714285714287,
                          1249.5714285714287,
                          1254.142857142857,
                          1253.2857142857142,
                          1268.7142857142858,
                          1262.7142857142858,
                          1262.2857142857142,
                          1269.0,
                          1268.7142857142858,
                          1265.857142857143,
                          1268.4285714285713,
                          1257.7142857142858,
                          1255.857142857143,
                          1254.857142857143,
                          1263.4285714285713,
                          1264.4285714285713,
                          1264.142857142857,
                          1264.2857142857142,
                          1260.0,
                          1258.142857142857,
                          1241.857142857143,
                          1242.142857142857,
                          1246.857142857143,
                          1234.7142857142858,
                          1241.4285714285713,
                          1241.5714285714287,
                          1261.7142857142858,
                          1260.142857142857,
                          1255.0,
                          1259.0,
                          1257.0,
                          1248.2857142857142,
                          1244.857142857143,
                          1247.142857142857,
                          1245.5714285714287,
                          1252.7142857142858,
                          1245.5714285714287,
                          1247.7142857142858,
                          1245.7142857142858,
                          1254.4285714285713,
                          1265.0,
                          1256.5714285714287,
                          1255.0,
                          1246.142857142857,
                          1253.4285714285713,
                          1235.857142857143,
                          1231.4285714285713,
                          1229.7142857142858,
                          1236.7142857142858,
                          1244.0,
                          1241.7142857142858,
                          1244.4285714285713,
                          1247.2857142857142,
                          1253.5714285714287,
                          1265.0,
                          1257.142857142857,
                          1254.7142857142858,
                          1254.2857142857142,
                          1259.857142857143,
                          1265.4285714285713,
                          1279.0,
                          1301.4285714285713,
                          1300.142857142857,
                          1276.5714285714287,
                          1253.857142857143,
                          1243.142857142857,
                          1242.142857142857,
                          1270.5714285714287,
                          1291.142857142857,
                          1311.142857142857,
                          1313.7142857142858,
                          1321.7142857142858,
                          1317.142857142857,
                          1291.4285714285713,
                          1268.142857142857,
                          1259.857142857143,
                          1270.5714285714287,
                          1316.142857142857,
                          1368.0]  #

    top001 = [1222.2857142857142,
              1253.0,
              1292.4285714285713,
              1320.2857142857142,
              1349.2857142857142,
              1383.142857142857,
              1414.4285714285713,
              1451.5714285714287,
              1468.0,
              1500.857142857143,
              1521.0,
              1539.4285714285713,
              1532.857142857143,
              1524.857142857143,
              1505.857142857143,
              1498.5714285714287,
              1509.142857142857,
              1499.2857142857142,
              1491.7142857142858,
              1498.0,
              1476.5714285714287,
              1462.0,
              1444.7142857142858,
              1428.142857142857,
              1418.5714285714287,
              1416.7142857142858,
              1408.4285714285713,
              1392.5714285714287,
              1385.2857142857142,
              1391.142857142857,
              1391.5714285714287,
              1382.0,
              1378.7142857142858,
              1392.142857142857,
              1389.7142857142858,
              1393.4285714285713,
              1393.857142857143,
              1394.5714285714287,
              1385.142857142857,
              1392.5714285714287,
              1393.857142857143,
              1391.142857142857,
              1378.2857142857142,
              1385.7142857142858,
              1388.857142857143,
              1388.7142857142858,
              1390.857142857143,
              1392.142857142857,
              1390.5714285714287,
              1384.142857142857,
              1383.2857142857142,
              1380.0,
              1385.857142857143,
              1380.0,
              1382.857142857143,
              1392.0,
              1379.857142857143,
              1368.5714285714287,
              1384.142857142857,
              1376.2857142857142,
              1380.7142857142858,
              1392.5714285714287,
              1395.857142857143,
              1389.142857142857,
              1384.142857142857,
              1386.0,
              1390.0,
              1391.2857142857142,
              1386.142857142857,
              1401.142857142857,
              1388.2857142857142,
              1384.2857142857142,
              1387.5714285714287,
              1387.2857142857142,
              1386.0,
              1382.857142857143,
              1397.142857142857,
              1391.7142857142858,
              1390.0,
              1390.5714285714287,
              1381.4285714285713,
              1386.142857142857,
              1392.142857142857,
              1391.0,
              1399.857142857143,
              1383.5714285714287,
              1385.142857142857,
              1394.0,
              1383.857142857143,
              1383.2857142857142,
              1380.5714285714287,
              1365.857142857143,
              1364.5714285714287,
              1360.7142857142858,
              1373.857142857143,
              1376.4285714285713,
              1376.4285714285713,
              1372.142857142857,
              1370.4285714285713,
              1378.2857142857142,
              1380.2857142857142,
              1373.857142857143,
              1372.5714285714287,
              1376.142857142857,
              1382.5714285714287,
              1381.5714285714287,
              1378.2857142857142,
              1388.5714285714287,
              1392.142857142857,
              1394.4285714285713,
              1389.5714285714287,
              1393.857142857143,
              1398.4285714285713,
              1399.2857142857142,
              1402.142857142857,
              1406.5714285714287,
              1394.0,
              1391.2857142857142,
              1405.0,
              1399.5714285714287,
              1408.7142857142858,
              1400.5714285714287,
              1409.857142857143,
              1410.142857142857,
              1412.5714285714287,
              1422.4285714285713,
              1426.7142857142858,
              1426.5714285714287,
              1431.0,
              1446.0,
              1459.2857142857142,
              1471.4285714285713,
              1476.0,
              1496.7142857142858,
              1511.857142857143,
              1540.7142857142858,
              1554.7142857142858,
              1584.4285714285713,
              1610.142857142857,
              1623.4285714285713,
              1608.142857142857,
              1597.5714285714287,
              1573.4285714285713,
              1518.2857142857142,
              1393.7142857142858,
              1147.2857142857142,
              815.7142857142857,
              574.5714285714286] #03-11-18 Covf Pro2 ProB - Part 1\001\top

    top001_2=[443.57142857142856,
494.14285714285717,
672.0,
1011.7142857142857,
1324.2857142857142,
1462.5714285714287,
1487.142857142857,
1460.142857142857,
1426.0,
1400.7142857142858,
1377.142857142857,
1359.7142857142858,
1340.0,
1315.0,
1296.5714285714287,
1281.0,
1267.857142857143,
1265.0,
1258.857142857143,
1251.5714285714287,
1245.5714285714287,
1243.857142857143,
1235.4285714285713,
1231.857142857143,
1232.0,
1234.4285714285713,
1235.4285714285713,
1233.2857142857142,
1227.0,
1229.0,
1228.4285714285713,
1227.0,
1223.2857142857142,
1222.857142857143,
1225.5714285714287,
1223.0,
1227.142857142857,
1229.857142857143,
1236.142857142857,
1236.142857142857,
1237.2857142857142,
1240.4285714285713,
1238.142857142857,
1239.142857142857,
1237.2857142857142,
1242.5714285714287,
1241.5714285714287,
1234.2857142857142,
1231.2857142857142,
1229.5714285714287,
1228.5714285714287,
1225.7142857142858,
1225.0,
1226.4285714285713,
1228.857142857143,
1224.142857142857,
1219.857142857143,
1221.5714285714287,
1223.2857142857142,
1226.7142857142858,
1228.857142857143,
1224.0,
1226.0,
1218.5714285714287,
1216.142857142857,
1225.5714285714287,
1222.2857142857142,
1221.5714285714287,
1225.4285714285713,
1223.857142857143,
1222.142857142857,
1220.857142857143,
1213.2857142857142,
1210.0,
1209.142857142857,
1211.0,
1215.7142857142858,
1213.0,
1210.4285714285713,
1211.0,
1213.142857142857,
1201.7142857142858,
1198.857142857143,
1207.7142857142858,
1208.857142857143,
1206.5714285714287,
1206.5714285714287,
1207.0,
1203.142857142857,
1203.5714285714287,
1218.142857142857,
1222.0,
1215.2857142857142,
1213.5714285714287,
1215.5714285714287,
1214.7142857142858,
1212.142857142857,
1216.2857142857142,
1213.5714285714287,
1212.4285714285713,
1215.857142857143,
1222.0,
1225.142857142857,
1223.4285714285713,
1230.142857142857,
1224.142857142857,
1225.0,
1229.2857142857142,
1233.4285714285713,
1237.4285714285713,
1244.0,
1248.7142857142858,
1247.0,
1252.5714285714287,
1260.857142857143,
1255.4285714285713,
1260.4285714285713,
1253.7142857142858,
1253.2857142857142,
1254.857142857143,
1257.5714285714287,
1263.142857142857,
1266.2857142857142,
1265.857142857143,
1264.4285714285713,
1264.4285714285713,
1271.5714285714287,
1277.7142857142858,
1293.5714285714287,
1309.2857142857142,
1314.4285714285713,
1313.857142857143,
1316.0,
1325.5714285714287,
1338.857142857143,
1345.2857142857142,
1350.5714285714287,
1356.5714285714287,
1344.857142857143,
1323.0,
1308.7142857142858,
1288.142857142857,
1261.4285714285713,
1239.4285714285713,
1213.5714285714287,
1184.7142857142858
]#E:\Mayra\Timelapses\coVF Timecourses\03-12-18 Covf Pro2 ProB - Part 2\001\top
    top=[672.0,
1011.7142857142857,
1324.2857142857142,
1462.5714285714287,
1487.142857142857,
1460.142857142857,
1426.0,
1400.7142857142858,
1377.142857142857,
1359.7142857142858,
1340.0,
1315.0,
1296.5714285714287,
1281.0,
1267.857142857143,
1265.0,
1258.857142857143,
1251.5714285714287,
1245.5714285714287,
1243.857142857143,
1235.4285714285713,
1231.857142857143,
1232.0,
1234.4285714285713,
1235.4285714285713,
1233.2857142857142,
1227.0,
1229.0,
1228.4285714285713,
1227.0,
1223.2857142857142,
1222.857142857143,
1225.5714285714287,
1223.0,
1227.142857142857,
1229.857142857143,
1236.142857142857,
1236.142857142857,
1237.2857142857142,
1240.4285714285713,
1238.142857142857,
1239.142857142857,
1237.2857142857142,
1242.5714285714287,
1241.5714285714287,
1234.2857142857142,
1231.2857142857142,
1229.5714285714287,
1228.5714285714287,
1225.7142857142858,
1225.0,
1226.4285714285713,
1228.857142857143,
1224.142857142857,
1219.857142857143,
1221.5714285714287,
1223.2857142857142,
1226.7142857142858,
1228.857142857143,
1224.0,
1226.0,
1218.5714285714287,
1216.142857142857,
1225.5714285714287,
1222.2857142857142,
1221.5714285714287,
1225.4285714285713,
1223.857142857143,
1222.142857142857,
1220.857142857143,
1213.2857142857142,
1210.0,
1209.142857142857,
1211.0,
1215.7142857142858,
1213.0,
1210.4285714285713,
1211.0,
1213.142857142857,
1201.7142857142858,
1198.857142857143,
1207.7142857142858,
1208.857142857143,
1206.5714285714287,
1206.5714285714287,
1207.0,
1203.142857142857,
1203.5714285714287,
1218.142857142857,
1222.0,
1215.2857142857142,
1213.5714285714287,
1215.5714285714287,
1214.7142857142858,
1212.142857142857,
1216.2857142857142,
1213.5714285714287,
1212.4285714285713,
1215.857142857143,
1222.0,
1225.142857142857,
1223.4285714285713,
1230.142857142857,
1224.142857142857,
1225.0,
1229.2857142857142,
1233.4285714285713,
1237.4285714285713,
1244.0,
1248.7142857142858,
1247.0,
1252.5714285714287,
1260.857142857143,
1255.4285714285713,
1260.4285714285713,
1253.7142857142858,
1253.2857142857142,
1254.857142857143,
1257.5714285714287,
1263.142857142857,
1266.2857142857142,
1265.857142857143,
1264.4285714285713,
1264.4285714285713,
1271.5714285714287,
1277.7142857142858,
1293.5714285714287,
1309.2857142857142,
1314.4285714285713,
1313.857142857143,
1316.0,
1325.5714285714287,
1338.857142857143,
1345.2857142857142,
1350.5714285714287,
1356.5714285714287,
1344.857142857143,
1323.0,
1308.7142857142858,
1288.142857142857,
1261.4285714285713,
1239.4285714285713,
1213.5714285714287,
1184.7142857142858,
]#E:\Mayra\Timelapses\coVF Timecourses\03-12-18 Covf Pro2 ProB - Part 2\001 top
    top_pProB=[535.4,
790.4,
1255.8,
1709.0,
1962.0,
2049.8,
2006.6,
1926.8,
1877.8,
1834.4,
1793.2,
1766.4,
1751.6,
1738.0,
1713.4,
1692.8,
1682.2,
1668.0,
1674.2,
1676.2,
1661.4,
1646.8,
1646.0,
1628.8,
1630.8,
1636.6,
1640.4,
1627.2,
1632.8,
1632.4,
1634.4,
1628.4,
1632.8,
1652.0,
1645.2,
1634.2,
1622.6,
1627.0,
1643.4,
1641.2,
1638.4,
1657.8,
1651.8,
1658.4,
1668.8,
1662.4,
1645.8,
1645.8,
1647.0,
1645.0,
1645.6,
1646.2,
1634.8,
1638.6,
1625.6,
1621.4,
1637.0,
1636.8,
1626.4,
1621.2,
1626.2,
1629.0,
1638.8,
1635.6,
1643.8,
1643.6,
1642.6,
1647.2,
1643.6,
1645.0,
1645.0,
1658.0,
1657.4,
1652.2,
1662.6,
1669.0,
1671.6,
1662.2,
1659.8,
1659.2,
1658.6,
1666.8,
1657.6,
1663.2,
1675.6,
1680.0,
1671.2,
1659.0,
1660.2,
1658.0,
1660.4,
1662.0,
1662.0,
1652.8,
1645.2,
1632.6,
1623.4,
1623.6,
1629.4,
1630.6,
1629.4,
1634.0,
1625.8,
1610.0,
1601.4,
1608.4,
1625.0,
1624.8,
1606.6,
1618.2,
1619.2,
1618.2,
1618.0,
1631.4,
1647.0,
1648.8,
1642.4,
1660.8,
1679.4,
1703.6,
1726.0,
1738.4,
1736.8,
1750.4,
1775.8,
1795.6,
1798.4,
1809.8,
1816.0,
1811.2,
1807.4,
1836.0,
1844.0,
1862.4,
1890.2,
1883.0,
1853.2,
1815.2,
1775.6,
1749.8,
1757.6]

    top_MM18B=[1010.0,
1417.142857142857,
1601.4285714285713,
1621.0,
1623.0,
1584.5714285714287,
1575.2857142857142,
1545.2857142857142,
1517.5714285714287,
1494.7142857142858,
1474.857142857143,
1453.5714285714287,
1447.5714285714287,
1435.2857142857142,
1425.2857142857142,
1419.857142857143,
1423.7142857142858,
1431.7142857142858,
1424.142857142857,
1418.4285714285713,
1410.4285714285713,
1427.142857142857,
1425.7142857142858,
1423.857142857143,
1425.0,
1419.142857142857,
1416.7142857142858,
1418.5714285714287,
1427.0,
1423.142857142857,
1427.857142857143,
1421.2857142857142,
1421.4285714285713,
1419.5714285714287,
1429.5714285714287,
1419.857142857143,
1436.2857142857142,
1426.2857142857142,
1433.2857142857142,
1444.142857142857,
1426.5714285714287,
1457.2857142857142,
1444.142857142857,
1459.7142857142858,
1450.0,
1461.0,
1452.5714285714287,
1458.857142857143,
1461.0,
1457.142857142857,
1445.142857142857,
1467.4285714285713,
1451.4285714285713,
1470.5714285714287,
1470.142857142857,
1463.5714285714287,
1466.0,
1476.142857142857,
1477.0,
1489.4285714285713,
1475.857142857143,
1468.7142857142858,
1462.0,
1476.857142857143,
1484.2857142857142,
1466.4285714285713,
1481.5714285714287,
1473.0,
1480.857142857143,
1477.4285714285713,
1476.5714285714287,
1480.142857142857,
1469.2857142857142,
1481.0,
1483.0,
1477.5714285714287,
1483.142857142857,
1461.0,
1467.142857142857,
1473.857142857143,
1463.2857142857142,
1468.7142857142858,
1467.5714285714287,
1471.4285714285713,
1481.2857142857142,
1481.4285714285713,
1485.142857142857,
1466.7142857142858,
1482.4285714285713,
1475.5714285714287,
1483.7142857142858,
1478.2857142857142,
1478.4285714285713,
1475.0,
1477.2857142857142,
1473.2857142857142,
1493.0,
1483.4285714285713,
1490.7142857142858,
1505.5714285714287,
1494.4285714285713,
1500.2857142857142,
1484.857142857143,
1501.7142857142858,
1494.142857142857,
1499.4285714285713,
1506.5714285714287,
1497.7142857142858,
1503.4285714285713,
1494.7142857142858,
1483.2857142857142,
1484.857142857143,
1485.7142857142858,
1476.5714285714287,
1489.857142857143,
1484.857142857143,
1481.857142857143,
1493.0,
1497.7142857142858,
1499.7142857142858,
1505.857142857143,
1524.0,
1514.5714285714287,
1507.4285714285713,
1509.0,
1523.2857142857142,
1541.857142857143,
1564.142857142857,
1576.2857142857142,
1578.142857142857,
1564.7142857142858,
1553.5714285714287,
1568.4285714285713,
1568.142857142857,
1595.857142857143,
1594.4285714285713,
1600.142857142857,
1584.0,
1565.7142857142858,
1548.142857142857,
1539.5714285714287,
1566.2857142857142,
1613.857142857143,
1702.142857142857,
1817.857142857143]

    return top_MM18B

def find_cells_in_channel(image):
    method = tunable('cells.detectionmethod', 'classic', description="Cell detection method to use.")
    if method == 'classic':
        return find_cells_in_channel_classic_with_top_hat(image)
    else:
        raise RuntimeError('Unsupported cell detection method passed.')

def find_cells_in_channel_classic(original_image):
    # processing is as always mainly performed on the intensity profile
    """

    :param original_image:
    :return:
    """
    #############################################
    outlier_times_sigma = 1.0  # them=2.0
    otsu_bias = 0.98
    smooth = 4
    cells_extrema_order = 15
    otsu_threshold_gap = 0.35

    otsu_bright = 0.37
    threshold_prominence_for_poles = 90

    transform_image = True
    #####################################################
    profile_raw = vertical_mean(original_image)
    profile_empty_channel_mean = empty_channel_mean_profile()
    profile_empty_channel_mean = np.asarray(profile_empty_channel_mean)


    if transform_image:
        def transform_image(transformation_type):
            """

            :param transformation_type: 'scaling' or 'mean_subtraction'
            :return:
            """
            transformed_image = []

            if transformation_type == 'scaling':
                profile_empty_channel_norm = normalize2(profile_empty_channel_mean)
                for column in original_image:
                    column_mean = np.mean(column)

                    # scaling the empty channel profile, multiplying the normalized profile by the mean of the column
                    horizontal_mean_empty_chan_scaled = multiply_list_by_element(profile_empty_channel_norm, column_mean)

                    # subtraction of the scaled profile to the column
                    column_minus_empty_channel = subtraction(column, horizontal_mean_empty_chan_scaled)
                    transformed_image.append(column_minus_empty_channel)

            elif transformation_type == 'mean_subtraction':

                mean_empty_profile = np.mean(profile_empty_channel_mean)
                empty_corrected = add_element_to_list(profile_empty_channel_mean, -1 * mean_empty_profile)

                for column in np.transpose(original_image):
                    mean_column = np.mean(column)
                    column_corrected = add_element_to_list(column, -1 * mean_column)
                    column_minus_empty_channel = subtraction(column_corrected, empty_corrected)

                    transformed_image.append(column_minus_empty_channel)

            # traslate the profiles to positive quadrant and make it and array and return to original position
            transformed_image = transformed_image + np.abs(np.min(transformed_image))
            return np.transpose(np.asarray(transformed_image))

        image = transform_image('mean_subtraction')
    else:
        image = original_image

    profile = vertical_mean(image)

    # empty channel detection
    thresholded_profile = threshold_outliers(profile, tunable('cells.empty_channel.skipping.outlier_times_sigma',outlier_times_sigma, description="For empty channel detection, maximum sigma used for thresholding the profile."))
    if tunable('cells.empty_channel.skipping', False, description="For empty channel detection, whether it is enabled."):

        # if active, a non-empty channel must have a certain dynamic range min/max
        if ((thresholded_profile.max() - thresholded_profile.min()) / thresholded_profile.max()) < \
                tunable(
                    'cells.empty_channel.skipping.intensity_range_quotient',
                    0.5,
                    description="For empty channel detection, the minimum relative difference between max and min."):
            return []

    # for cell detection, another intensity profile based on an Otsu binarization is used as well
    binary_image = image > threshold_otsu(image) * tunable('cells.otsu_bias', otsu_bias, description="Bias factor for the cell detection Otsu image.")
    binary_image_new = binary_image

    complete_image = True
    cut_edges = False  # To ignore edges in binary image
    if cut_edges:
        # Here I will potentially remove one or both horizontal edges taking in account shadows coming
        # from being at the edge #maybe this should have been corrected in channel_detetion and not here

        profile_of_binary_image_horizontal = horizontal_mean(binary_image.astype(float))
        if profile_of_binary_image_horizontal[0] < 0.02:
            print("antes ", len(binary_image[0]))
            binary_image_new = [a[1:] for a in binary_image.astype(float)]
            profile_of_binary_image = vertical_mean(binary_image_new)

            print("despues", len(binary_image_new[0]))
            complete_image = False
            print("removed: ", 0)
            print(profile_of_binary_image_horizontal[-1])

        if profile_of_binary_image_horizontal[-1] < 0.02:
            if complete_image:
                complete_image = False
                last_row = len(profile_of_binary_image_horizontal) - 1
            else:
                last_row = len(profile_of_binary_image_horizontal) - 2
            binary_image_new = [a[:last_row] for a in binary_image.astype(float)]
            profile_of_binary_image = vertical_mean(binary_image_new)

            print("removed: ", last_row)

    if complete_image:
        profile_of_binary_image = vertical_mean(binary_image.astype(float))

    profile1 = simple_baseline_correction(profile)
    profile2 = hamming_smooth(profile1, tunable('cells.smoothing.length', smooth,                                                description="Length of smoothing Hamming window for cell detection."))
    profile2 = profile2.round(8)

    with DebugPlot('graph') as p:
        p.plot(normalize2(profile_raw), label="0-raw profile")
        p.plot(normalize2(profile), label="1-transformation")
        p.plot(normalize2(profile1), label="2-baseline_correction")
        p.plot(normalize2(profile2), label="3-smooth ")
        p.title("normalized vertical profiles of the channel")
        p.legend()

    extrema = find_extrema_and_prominence(profile2, order=tunable('cells.extrema.order', cells_extrema_order, description="For cell detection, window width of the local extrema detector. How many points on each side to use for the comparison to consider comparator(n, n+x) to be True."))

    def is_a_cell(last_pos, pos):
        """

        :param last_pos:
        :param pos:
        :return:
        """
        # based on the following filter function,
        # it will be decided whether a pair of extrema marks a cell or not
        # #1# size must be larger than zero
        # #2# the cell must have a certain 'blackness' (based on the Otsu binarization)
        # #3# the cell must have a certain prominence (difference from background brightness)

        # please note, while #1# looks like the minimum size criterion as described in the paper,
        # it is just a pre-filter, the actual minimal size filtering is done in the Cells class!
        # that way, the cell detection routine here is independent of more mundane aspects like calibration,
        # and changes in cell detection routine will still profit from the size-postprocessing

        min_size = 2
        max_bright = 0.5
        min_prominence = 90  # so far this number is arbitrary, taken from observations it is needed something with more control over it

        cell = False
        size_condition = pos - last_pos > min_size
        # print("\t size ", size_condition, pos - last_pos)

        if size_condition:
            brightness = profile_of_binary_image[last_pos:pos].mean()
            brightness_condition = brightness < tunable('cells.filtering.maximum_brightness', max_bright,
                                                        description="For cell detection, maximum brightness a cell may have.")
            # print("\t bright ", brightness_condition, brightness)

            if brightness_condition:
                mean_prominence = extrema.prominence[last_pos:pos].mean()
                prominence_condition = mean_prominence > \
                                       tunable('cells.filtering.minimum_prominence', min_prominence,
                                               description="For cell detection, minimum prominence a cell must have.")
                # print("\t prom ", prominence_condition , mean_prominence)

                cell = prominence_condition

        return cell

    # profile_of_binary_image_norm = normalize2(profile_of_binary_image)
    profile_of_binary_image_norm = profile_of_binary_image
    def positions_from_gap_analysis():
        empty_spaces = [new_pos for new_pos in range(0, len(profile_of_binary_image)) \
                        if profile_of_binary_image_norm[new_pos] > otsu_threshold_gap]

        def eliminate_consecutives(A):

            B = []
            for a in range(0, len(A) - 1):
                if A[a + 1] - A[a] != 1:
                    B.append(A[a])
                    B.append(A[a + 1])
            B = list(set(B))
            B.extend([A[0], A[-1]])
            return B

        if len(empty_spaces) > 1:
            new_positions = eliminate_consecutives(empty_spaces)
        else:
            new_positions = empty_spaces
        # new_positions = [p-1 for p in new_positions]
        return new_positions

    # possible positions are constructed, and a cell list is generated by checking them with the is_a_cell function
    if tunable('cells.split.use_brightness', 0, description="For cell splitting, use threshold") == 1:
        positions = [_pos for _pos in extrema.maxima if extrema.prominence[_pos] > 0] + [profile.size]
    else:
        # points from maxima criteria and gap analysis from otsu profile
        possible_pos_max = [_pos for _pos in extrema.maxima]
        possible_pos_max = [_pos-1 for _pos in possible_pos_max]
        possible_pos_otsu = positions_from_gap_analysis()

        # merge, eliminate repetitions and sort
        possible_positions = possible_pos_max + possible_pos_otsu
        possible_positions = list(set(possible_positions))
        possible_positions = sorted(possible_positions)

        # evaluate prominence in all of the positions
        positions = [_pos for _pos in possible_positions if extrema.prominence[_pos] > threshold_prominence_for_poles]

        # ealuate brightness in "poles"
        positions = [_pos for _pos in positions if
                     profile_of_binary_image_norm[_pos] >
                     tunable('cells.split.minimum_brightness', otsu_bright,
                             description="For cell detection, minimum brightness a split point must have.")
                     ]

        positions = [0] + positions + [profile.size]

    debug_print_possible_poles = False
    if debug_print_possible_poles:

        print("possible positions \t mean prominence \t mean otsu \t positions \t ")
        for _pos in possible_positions:
            print(_pos,
                  "\t", float("{0:.2f}".format(extrema.prominence[_pos])),
                  "\t", float("{0:.3f}".format(profile_of_binary_image[_pos])),
                   "\t", _pos in positions)

    with DebugPlot('graph') as p:
        p.title("profile_of_binary_image")
        p.plot(profile_of_binary_image)
        p.plot([s for s in possible_pos_max], [0.8] * len(possible_pos_max), 'o', color='m', label="possible_pos_max")
        p.plot([pos for pos in possible_pos_otsu], [0.85] * len(possible_pos_otsu), 'o', color='b',
               label="possible_pos_otsu")
        p.plot([pos for pos in positions], [0.75] * len(positions), 'o', color='orange', label="positions")
        p.legend()

    # Evaluation to determine if what is inside the positions is a cells
    # print("cells:")
    new_cells = []
    for _last_pos, _pos in zip([0] + positions, positions):
        cell = False
        if is_a_cell(_last_pos, _pos):
            cell = True
            new_cells.append([_last_pos, _pos])
            # print([_last_pos, _pos])

    with DebugPlot('cell_detection', 'channel', 'graph') as p:
        p.title("Cell detection")
        p.imshow(np.transpose(image), aspect='auto', extent=(0, image.shape[0], 10 * image.shape[1], 0))
        p.imshow(np.transpose(binary_image_new), aspect='auto', extent=(0, image.shape[0], 0, -10 * image.shape[1]))

        p.legend()

        new_cell_lines = [__pos for __pos in new_cells for __pos in __pos]

        p.vlines(new_cell_lines,
                 [image.shape[1] * -10] * len(new_cell_lines),
                 [image.shape[1] * 10] * len(new_cell_lines), linestyles='dashed', colors='m')

    return new_cells

def find_cells_in_channel_classic_with_top_hat(original_image):
    """

    :param original_image:
    :return:
    """

    #################### Parameters ######################
    otsu_bias = 0.8
    smooth = 7
    cells_extrema_order = 12
    # otsu_threshold_gap = 0.6
    otsu_bright = 0.5
    threshold_prominence_for_poles = 40

    # is a cell parameters
    min_size = 9
    max_bright = 0.7
    min_prominence = 10

    smoth_binary_profile = smooth

    cut_edges_from_binary_image =  True

    top_hat_transformation = True
    top_hat_tuple = [6, 5]#this is the transpose of the tuple used in the notebook for debugging
    cut_image =  False
    pixel_start, number_pixels_to_keep = 1 , 6

    ############### Print Debug Parameters ##############
    debug_print_possible_poles = False
    debug_print_cell_evaluation = False


    ##################### Transform #####################

    if top_hat_transformation:
        image = white_top_hat(original_image, top_hat_tuple)
    else:
        image = original_image
    if cut_image:
        def cut_rows_from_image_array(image_, pixels_from_left, number_pixels_to_keep):
            h=pixels_from_left+number_pixels_to_keep
            cutted_image = [a[pixels_from_left:h:] for a in image_.astype(float)]
            return np.array(cutted_image)
        cutted_image = cut_rows_from_image_array(image, pixel_start, number_pixels_to_keep)
        image = cutted_image

    ####################### Binary image & cut edges of it

    threshold_image = threshold_otsu(image)

    # import numpy as np
    # print(np.min(image) ,"\t", np.max(image),"\t",  np.round(np.mean(image)), "\t", threshold_image, "\t", np.min(original_image), "\t", np.max(original_image), "\t", np.round(np.mean(original_image)),"\t",   threshold_otsu(original_image))

    binary_image = image > threshold_image * tunable('cells.otsu_bias', otsu_bias, description="Bias factor for the cell detection Otsu image.")

    with DebugPlot('variable_otsu_bias') as p:
        p.title("Cell detection")
        p.imshow(np.transpose(image), aspect='auto', extent=(0, image.shape[0], 10 * image.shape[1], 0))
        p.show()
        p.imshow(np.transpose(binary_image), aspect='auto', extent=(0, image.shape[0], 0, -10 * image.shape[1]))
        p.show()
        # p.imshow(np.transpose(threshold_image), aspect='auto', extent=(0, image.shape[0], 0, -10 * image.shape[1]))

        # p.legend()



    complete_image = True

    if cut_edges_from_binary_image:
        # Here I will potentially remove one or both horizontal edges taking in account shadows coming
        # from being at the edge #maybe this should have been corrected in channel_detetion and not here

        profile_of_binary_image_horizontal = horizontal_mean(binary_image.astype(float))
        if profile_of_binary_image_horizontal[0] < 0.02:
            #print("antes ", len(binary_image[0]))
            binary_image_new = [a[1:] for a in binary_image.astype(float)]
            profile_of_binary_image = vertical_mean(binary_image_new)

            # print("despues", len(binary_image_new[0]))
            complete_image = False
            # print("removed: ", 0)
            # print(profile_of_binary_image_horizontal[-1])

        if profile_of_binary_image_horizontal[-1] < 0.02:
            if complete_image:
                complete_image = False
                last_row = len(profile_of_binary_image_horizontal) - 1
            else:
                last_row = len(profile_of_binary_image_horizontal) - 2
            binary_image_new = [a[:last_row] for a in binary_image.astype(float)]
            profile_of_binary_image = vertical_mean(binary_image_new)

            binary_image = binary_image_new
            # print("removed: ", last_row)


    ############# All profiles

    profile_raw = vertical_mean(original_image)
    profile_t = vertical_mean(image)
    profile_t_bl = simple_baseline_correction(profile_t)
    profile_smooth = hamming_smooth(profile_t_bl, tunable('cells.smoothing.length', smooth, description="Length of smoothing Hamming window for cell detection.")).round(8)

    profile = profile_smooth

    profile_of_binary_image = vertical_mean(binary_image)
    profile_of_binary_image = normalize2(hamming_smooth(profile_of_binary_image, smoth_binary_profile))

    ############ Finding Poles
    extrema = find_extrema_and_prominence(profile_smooth, order=tunable('cells.extrema.order', cells_extrema_order, description="For cell detection, window width of the local extrema detector. How many points on each side to use for the comparison to consider comparator(n, n+x) to be True."))

    possible_pos_max = [_pos for _pos in extrema.maxima]

    # merge, eliminate repetitions and sort
    possible_positions = possible_pos_max
    possible_positions = list(set(possible_positions))
    possible_positions = sorted(possible_positions)

    # evaluate prominence in all of the positions
    positions = [_pos for _pos in possible_positions if extrema.prominence[_pos] > threshold_prominence_for_poles]

    # evaluate brightness in "poles"

    # extrema_original = find_extrema_and_prominence(hamming_smooth(profile_raw, smooth), order=tunable('cells.extrema.order', cells_extrema_order,
    #                                                                     description="For cell detection, window width of the local extrema detector. How many points on each side to use for the comparison to consider comparator(n, n+x) to be True."))

    threshold_for_binary_image = normalize_specific_range(extrema.prominence, 0.7, 0.4)
    fixed_threshold_binary_image = False
    if fixed_threshold_binary_image == True:
        positions = [_pos for _pos in positions if
                     profile_of_binary_image[_pos] >= otsu_bright]
    else:
        positions = [_pos for _pos in positions if
                     profile_of_binary_image[_pos] >= threshold_for_binary_image[_pos]]



    #here I am evaluating at the two neighbor positions, in case the maxima/pole its not cach in same position as in the binary profile
    # positions_1=[]
    # for _pos in positions:
    #     evaluation = profile_of_binary_image[_pos] >= otsu_bright
    #     if _pos>0:
    #         evaluation_one_before = profile_of_binary_image[_pos-1] >= otsu_bright
    #         evaluation = evaluation or evaluation_one_before
    #     # evaluation_one_after = profile_of_binary_image[_pos+1] >= otsu_bright
    #
    #     if evaluation:
    #         positions_1.append(_pos)

    positions = [0] +  positions + [profile.size-1]

    #re-evaluation poles
    positions_ends = []
    for _last_pos, _pos in zip([0] + positions, positions):
        positions_ends.append([_last_pos, _pos])

        new_positions_ends = []
    new_positions_ends=[]
    for start, end in positions_ends:

        go_right = True
        i = start
        new_start = start

        while go_right and i < end - 1:
            i = i + 1
            if profile_of_binary_image[i] >= profile_of_binary_image[i - 1] and profile_of_binary_image[i]  >= threshold_for_binary_image[i]:
                new_start = i
            else:
                go_right = False

        go_left = True
        i = end
        new_end = end

        while go_left and i > start:
            i = i - 1

            if profile_of_binary_image[i] >= profile_of_binary_image[i + 1]*0.9  and profile_of_binary_image[i]  >= threshold_for_binary_image[i]:
                new_end = i
            else:
                go_left = False
        new_positions_ends.append([new_start, new_end])



    # possible positions are constructed, and a cell list is generated by checking them with the is_a_cell function
    # points from maxima criteria and gap analysis from otsu profile
    ################# Evaluation cells # Evaluation to determine if what is inside the positions is a cells
    def is_a_cell(last_pos, pos):
        """

        :param last_pos:
        :param pos:
        :return:
        """
        # based on the following filter function,
        # it will be decided whether a pair of extrema marks a cell or not
        # #1# size must be larger than zero
        # #2# the cell must have a certain 'blackness' (based on the Otsu binarization)
        # #3# the cell must have a certain prominence (difference from background brightness)

        # please note, while #1# looks like the minimum size criterion as described in the paper,
        # it is just a pre-filter, the actual minimal size filtering is done in the Cells class!
        # that way, the cell detection routine here is independent of more mundane aspects like calibration,
        # and changes in cell detection routine will still profit from the size-postprocessing

        cell = False
        size_condition = pos - last_pos > min_size

        if debug_print_cell_evaluation:
            print([_last_pos, _pos])
            print("\t size ", size_condition, pos - last_pos)

        if size_condition:
            brightness = profile_of_binary_image[last_pos:pos].mean()
            brightness_condition = brightness < tunable('cells.filtering.maximum_brightness', max_bright,
                                                         description="For cell detection, maximum brightness a cell may have.")
            if debug_print_cell_evaluation:
                print("\t bright ", brightness_condition, brightness)

            if brightness_condition:
                mean_prominence = extrema.prominence[last_pos:pos].mean()
                prominence_condition = mean_prominence > \
                                       tunable('cells.filtering.minimum_prominence', min_prominence,
                                               description="For cell detection, minimum prominence a cell must have.")
                if debug_print_cell_evaluation:
                    print("\t prom ", prominence_condition , mean_prominence)

                cell = prominence_condition

        return cell

    new_cells = []
    for _last_pos, _pos in new_positions_ends:
        # print(_last_pos, _pos)
        cell = False
        if is_a_cell(_last_pos, _pos):
            cell = True
            new_cells.append([_last_pos, _pos])

    #Print and plots to debug
    if debug_print_possible_poles:

        print("possible positions \t mean prominence \t mean otsu \t threshold bi \t positions \t ")
        for _pos in possible_positions:
            print(_pos,
                  "\t", float("{0:.2f}".format(extrema.prominence[_pos])),
                  "\t", float("{0:.3f}".format(profile_of_binary_image[_pos])),
                  "\t", float("{0:.4f}".format(threshold_for_binary_image[_pos-1])),
                  "\t", _pos in positions)

    with DebugPlot('graph profiles') as p:
        p.plot(normalize2(profile_raw), label="profile")
        p.plot(normalize2(profile_t_bl), label="transformation and baseline correction")
        p.plot(normalize2(profile_smooth), label="smooth")
        # p.show()
        # p.plot(profile_raw, label="raw")
        # p.plot(profile_t, label="t")
        # p.plot(profile_t_bl, label="t-bl")
        # p.plot(profile_smooth, label="smooth")


        p.title("normalized vertical profiles of the channel")
        p.legend(loc='center left', bbox_to_anchor=(1, 0.5))

    with DebugPlot('graph binary image') as p:
        p.title("profile_of_binary_image")
        p.plot(profile_of_binary_image)
        p.plot(threshold_for_binary_image)

        all_ends = list(itertools.chain.from_iterable(new_positions_ends))


        p.plot([s for s in possible_pos_max], [0.8] * len(possible_pos_max), 'o', color='m', label="possible_pos_max")
        p.plot([pos for pos in  all_ends], [0.85] * len( all_ends), 'o', color='b',
               label="re-evaluation ends")
        p.plot(positions, [0.75] * len(positions), 'o', color='orange', label="positions")
        p.legend(loc='center left', bbox_to_anchor=(1, 0.5))

    with DebugPlot('cell_detection', 'channel', 'graph') as p:
        p.title("Cell detection")
        p.imshow(np.transpose(image), aspect='auto', extent=(0, image.shape[0], 10 * image.shape[1], 0))
        p.imshow(np.transpose(binary_image), aspect='auto', extent=(0, image.shape[0], 0, -10 * image.shape[1]))

        p.legend()

        new_cell_lines = [__pos for __pos in new_cells for __pos in __pos]

        p.vlines(new_cell_lines,
                 [image.shape[1] * -10] * len(new_cell_lines),
                 [image.shape[1] * 10] * len(new_cell_lines), linestyles='dashed', colors='m')

    return [new_cells, min_and_max(profile_smooth)]
